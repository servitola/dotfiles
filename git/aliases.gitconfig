[alias]

	b = branch -vv
	c = !git add -A && git commit --verbose -m
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	f = fetch --all
	l = log -n 25 --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	m = merge
	s = status -s
	t = tag
	w = whatchanged
	alias=!git config -l | grep ^alias | cut -c 7- | sort # List aliases.
	bd = branch -d
	bD = branch -D
	# Show verbose output about tags, branches or remotes
	branches = branch --all
	ca = commit -a
	ci = commit
	ch = cherry-pick
	cm = commit --amend
	co = checkout
	cob = checkout -b
	contributors = shortlog --summary --numbered
	cp = cherry-pick
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	diffc = diff --cached
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	ff = merge --ff-only
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	last = log -n 1
	pl = !git sphph && git pull origin master --rebase && git remote prune origin && git submodule update --init --recursive && git splpl
	pull = pl
	ps = !git f && git push -v
	rb = rebase
	rbi = rebase -i
	sh = show
	sm = status -s
	splpl = !git stash list | grep ": autostash" | tr -dc '0-9' | xargs git stash apply
	st = status
	push = ps
	remotes = remote --verbose
	rup = remote update
	rsh = !git reset --hard
	sphph = !git stash save autostash
	tags = tag -l
	undo = !git reset HEAD~1 --mixed
	unstage = reset HEAD --
	whoami = config user.email

	# show what I did today
    day = "!sh -c 'git log --reverse --no-merges --branches=* --date=local --after=\"yesterday 11:59PM\" --author=\"`git config --get user.name`\"'"

	# show the committers in the last 100 commits, sorted by who has commited the most
    review = "!git log --no-merges --pretty=%an | head -n 100 | sort | uniq -c | sort -nr"

	# order files by number of commits, ascending
    # Written by Corey Haines
    # Scriptified by Gary Bernhardt
    # Show churn for a time range:
    # $ git churn --since='1 month ago'
    churn = "!f() { git log --all -M -C --name-only --format='format:' \"$@\" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print \"count\tfile\"} {print $1 \"\t\" $2}' | sort -g; }; f"

	# show all deleted files in the repo
    deleted = "!git log --diff-filter=D --summary | grep delete"

	cleanup = "!git remote prune origin && git gc && git clean -df && git stash clear"

	# rebase the current branch with changes from upstream remote
    update = !git fetch upstream && git rebase upstream/`git rev-parse --abbrev-ref HEAD`

	# clean up all
    forget = "!git fetch -p origin && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D"

# grep commands

    # 'diff grep'
    dg = "!sh -c 'git ls-files -m | grep $1 | xargs git diff' -"
    # diff grep changes between two commits
    dgc = "!sh -c 'git ls-files | grep $1 | xargs git diff $2 $3 -- ' -"
    # 'checkout grep'
    cg = "!sh -c 'git ls-files -m | grep $1 | xargs git checkout ' -"
    # add grep
    ag = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs git add --all' -"
    # add all
    aa = !git ls-files -d | xargs git rm && git ls-files -m -o --exclude-standard | xargs git add
